from datetime import date

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.models.user import User, DailyData
from app.db.db import get_db
from app.services.nutrition_cal_service import NutritionService
from app.services.workout_service import WorkoutService


router = Router()


class ActivitiesStates(StatesGroup):
    LOG_FOOD = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥—ã


def get_daily_data(user_id: int):
    db = next(get_db())
    user = db.query(User).filter(User.user_id == user_id).first()
    daily = db.query(DailyData).filter(
        DailyData.user_id == user.user_id,
        DailyData.date == date.today()
    ).first()

    if not daily:
        daily = DailyData(
            user_id=user.user_id,
            date=date.today(),
            logged_water=0,
            logged_calories=0,
            burned_calories=0
        )
        db.add(daily)
        db.commit()
    return daily


@router.message(Command("log_water"))
async def log_water(message: Message):
    db = next(get_db())
    user = db.query(User).filter(User.user_id == message.from_user.id).first()

    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    try:
        amount = float(message.text.split()[1])
        daily = get_daily_data(message.from_user.id)
        daily.logged_water += amount
        db.commit()

        remaining = user.water_level - daily.logged_water
        await message.answer(f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    try:
        query = " ".join(message.text.split()[1:])
        nutrition_service = NutritionService()
        nutrition_info = nutrition_service.get_nutrition_info(query)

        if nutrition_info:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(nutrition_info=nutrition_info[0])
            await message.answer(
                f"üçé {nutrition_info[0]['name']} - {nutrition_info[0]['calories']} –∫–∫–∞–ª/100–≥\n"
                "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
            )
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LOG_FOOD
            await state.set_state(ActivitiesStates.LOG_FOOD)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.message(ActivitiesStates.LOG_FOOD, F.text.regexp(r"^\d+$"))
async def process_food_amount(message: Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.user_id == message.from_user.id).first()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    nutrition_info = data.get("nutrition_info")

    if not nutrition_info:
        await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        grams = int(message.text)
        calories = grams * 0.01 * nutrition_info['calories']

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        daily = get_daily_data(message.from_user.id)
        daily.logged_calories += calories
        db.commit()

        await message.answer(f"üçΩ –ó–∞–ø–∏—Å–∞–Ω–æ {grams}–≥. –î–æ–±–∞–≤–ª–µ–Ω–æ {calories:.1f} –∫–∫–∞–ª")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    try:
        activity = " ".join(message.text.split()[1:-1])
        duration = int(message.text.split()[-1])
        workout = WorkoutService().get_calories_burned(activity, duration)

        if workout:
            daily = get_daily_data(message.from_user.id)
            daily.burned_calories += workout[0]['total_calories']
            await message.answer(
                f"üèÉ‚ôÇÔ∏è {workout[0]['activity']} {duration} –º–∏–Ω - {workout[0]['total_calories']} –∫–∫–∞–ª"
            )
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å> <–º–∏–Ω—É—Ç—ã>")


@router.message(Command("progress"))
async def show_progress(message: Message):
    db = next(get_db())
    user = db.query(User).filter(User.user_id == message.from_user.id).first()
    daily = get_daily_data(message.from_user.id)

    progress = (
        f"üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {daily.date}:\n"
        f"üíß –í–æ–¥–∞: {daily.logged_water}/{user.water_level} –º–ª\n"
        f"üçé –ö–∞–ª–æ—Ä–∏–∏: {daily.logged_calories:.1f}/{user.calorie_level} –∫–∫–∞–ª\n"
        f"üî• –°–æ–∂–∂–µ–Ω–æ: {daily.burned_calories} –∫–∫–∞–ª"
    )
    await message.answer(progress)