from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import io

from app.models.user import User, DailyData
from app.db.db import get_db
from app.services.weather_service import WeatherService


router = Router()


class ProfileStates(StatesGroup):
    WEIGHT = State()
    HEIGHT = State()
    AGE = State()
    ACTIVITY = State()
    CITY = State()


class EditProfileStates(StatesGroup):
    WEIGHT = State()
    HEIGHT = State()
    AGE = State()
    ACTIVITY = State()
    CITY = State()


def get_main_menu_keyboard(user_exists: bool) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    if user_exists:
        builder.button(text="Do it üèÜ or üçé", callback_data="worker")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="profile_settings")
        builder.button(text="‚ú® –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?", callback_data="bot_can_do")
    else:
        builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="set_profile")
        builder.button(text="‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ", callback_data="about_bot")

    builder.adjust(2)
    return builder


async def show_main_menu(callback_or_message: CallbackQuery | Message):
    with get_db() as db:
        user_id = (
            callback_or_message.from_user.id
            if isinstance(callback_or_message, CallbackQuery)
            else callback_or_message.from_user.id
        )
        user = db.query(User).filter(User.user_id == user_id).first()
        user_exists = user is not None

        builder = get_main_menu_keyboard(user_exists)
        text = "üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitnessBot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–∏–∑—É:"

        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(text, reply_markup=builder.as_markup())
        else:
            await callback_or_message.answer(text, reply_markup=builder.as_markup())


async def show_menu_with_back_button(
    callback: CallbackQuery,
    text: str,
    back_callback_data: str = "start"
):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.message(Command("start"))
async def start(message: Message):
    await show_main_menu(message)


@router.callback_query(F.data == "set_profile")
async def set_profile(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
    await state.set_state(ProfileStates.WEIGHT)


@router.message(ProfileStates.WEIGHT)
async def process_weight(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    await state.update_data(weight=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:")
    await state.set_state(ProfileStates.HEIGHT)


@router.message(ProfileStates.HEIGHT)
async def process_height(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    await state.update_data(height=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileStates.AGE)


@router.message(ProfileStates.AGE)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    await state.update_data(age=int(message.text))
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å?")
    await state.set_state(ProfileStates.ACTIVITY)


@router.message(ProfileStates.ACTIVITY)
async def process_activity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    await state.update_data(activity=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(ProfileStates.CITY)


@router.message(ProfileStates.CITY)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()
    weather = WeatherService().get_temperature(message.text)

    valid_fields = {"weight", "height", "age", "gender"}
    filtered_data = {k: v for k, v in data.items() if k in valid_fields}

    with get_db() as db:
        user = User(
            user_id=message.from_user.id,
            **filtered_data,
            city=message.text,
            water_level=calculate_water_goal(data, weather),
            calorie_level=calculate_calorie_goal(data)
        )
        db.add(user)
        db.commit()

        await message.answer(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {message.text}: {weather}¬∞C\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user.water_level} –º–ª\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user.calorie_level} –∫–∫–∞–ª",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üëç –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º/–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –∫–∞–ª–æ—Ä–∏–π", callback_data="start")
            .as_markup()
        )
        await state.clear()


@router.callback_query(F.data == "profile_settings")
async def profile_settings(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", callback_data="edit_weight")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—Å—Ç", callback_data="edit_height")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="edit_activity")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_city")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
    builder.adjust(2, 2, 1)

    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "edit_weight")
async def edit_weight(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å –≤ –∫–≥:")
    await state.set_state(EditProfileStates.WEIGHT)


@router.message(EditProfileStates.WEIGHT)
async def process_edit_weight(message: Message, state: FSMContext):
    data = await state.get_data()

    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    with get_db() as db:
        user = db.query(User).filter(User.user_id == message.from_user.id).first()

        if not user:
            return await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")

        weather = WeatherService().get_temperature(user.city)

        user.weight = float(message.text)
        user.water_level = calculate_water_goal({
            "weight": user.weight,
            "activity": data.get("activity", 0)
        }, weather)
        user.calorie_level = calculate_calorie_goal({
            "weight": user.weight,
            "height": user.height,
            "age": user.age
        })
        db.commit()

        updated_text = (
            f"‚úÖ –í–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {user.city}: {weather}¬∞C\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user.water_level} –º–ª\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user.calorie_level} –∫–∫–∞–ª"
        )

        await message.answer(updated_text)

    await state.clear()
    await show_main_menu(message)


@router.callback_query(F.data == "edit_height")
async def edit_height(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç –≤ —Å–º:")
    await state.set_state(EditProfileStates.HEIGHT)


@router.message(EditProfileStates.HEIGHT)
async def process_edit_height(message: Message, state: FSMContext):
    data = await state.get_data()

    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    with get_db() as db:
        user = db.query(User).filter(User.user_id == message.from_user.id).first()

        if not user:
            return await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")

        weather = WeatherService().get_temperature(user.city)

        user.height = float(message.text)
        user.water_level = calculate_water_goal({
            "weight": user.weight,
            "activity": data.get("activity", 0)
        }, weather)
        user.calorie_level = calculate_calorie_goal({
            "weight": user.weight,
            "height": user.height,
            "age": user.age
        })
        db.commit()

        updated_text = (
            f"‚úÖ –†–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {user.city}: {weather}¬∞C\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user.water_level} –º–ª\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user.calorie_level} –∫–∫–∞–ª"
        )

        await message.answer(updated_text)

    await state.clear()
    await show_main_menu(message)


@router.callback_query(F.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(EditProfileStates.AGE)


@router.message(EditProfileStates.AGE)
async def process_edit_age(message: Message, state: FSMContext):
    data = await state.get_data()

    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    with get_db() as db:
        user = db.query(User).filter(User.user_id == message.from_user.id).first()

        if not user:
            return await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")

        weather = WeatherService().get_temperature(user.city)

        user.age = int(message.text)
        user.water_level = calculate_water_goal({
            "weight": user.weight,
            "activity": data.get("activity", 0)
        }, weather)
        user.calorie_level = calculate_calorie_goal({
            "weight": user.weight,
            "height": user.height,
            "age": user.age
        })
        db.commit()

        updated_text = (
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {user.city}: {weather}¬∞C\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user.water_level} –º–ª\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user.calorie_level} –∫–∫–∞–ª"
        )

        await message.answer(updated_text)

    await state.clear()
    await show_main_menu(message)


@router.callback_query(F.data == "edit_activity")
async def edit_activity(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å:")
    await state.set_state(EditProfileStates.ACTIVITY)


@router.message(EditProfileStates.ACTIVITY)
async def process_edit_activity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    with get_db() as db:
        user = db.query(User).filter(User.user_id == message.from_user.id).first()

        if not user:
            return await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")

        weather = WeatherService().get_temperature(user.city)

        activity = int(message.text)
        user.water_level = calculate_water_goal({
            "weight": user.weight,
            "activity": activity
        }, weather)
        user.calorie_level = calculate_calorie_goal({
            "weight": user.weight,
            "height": user.height,
            "age": user.age
        })
        db.commit()

        updated_text = (
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {user.city}: {weather}¬∞C\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user.water_level} –º–ª\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user.calorie_level} –∫–∫–∞–ª"
        )

        await message.answer(updated_text)

    await state.clear()
    await show_main_menu(message)


@router.callback_query(F.data == "edit_city")
async def edit_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await state.set_state(EditProfileStates.CITY)


@router.message(EditProfileStates.CITY)
async def process_edit_city(message: Message, state: FSMContext):
    data = await state.get_data()

    if not message.text.strip():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")

    with get_db() as db:
        user = db.query(User).filter(User.user_id == message.from_user.id).first()

        if not user:
            return await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")

        weather = WeatherService().get_temperature(message.text)

        user.city = message.text
        user.water_level = calculate_water_goal({
            "weight": user.weight,
            "activity": data.get("activity", 0)
        }, weather)
        user.calorie_level = calculate_calorie_goal({
            "weight": user.weight,
            "height": user.height,
            "age": user.age
        })
        db.commit()

        updated_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {user.city}: {weather}¬∞C\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user.water_level} –º–ª\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user.calorie_level} –∫–∫–∞–ª"
        )

        await message.answer(updated_text)

    await state.clear()
    await show_main_menu(message)


@router.callback_query(F.data == "statistics")
async def statistics(callback: CallbackQuery):
    await callback.message.delete()

    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="daily_statistics")
    builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–µ–Ω—å", callback_data="daily_progress_graph")
    builder.button(text="üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü", callback_data="monthly_progress_graph")
    builder.button(text="üèÜ –ê—á–∏–≤–∫–∏", callback_data="achievements")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
    builder.adjust(2, 2, 1)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "daily_statistics")
async def daily_statistics(callback: CallbackQuery):
    with get_db() as db:
        user = db.query(User).filter(User.user_id == callback.from_user.id).first()
        if user:
            daily_data = db.query(DailyData).filter(DailyData.user_id == user.user_id, DailyData.date == datetime.today().date()).first()
            if daily_data:
                text = (
                    f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n\n"
                    f"üíß –í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {daily_data.logged_water} –º–ª –∏–∑ {user.water_level} –º–ª\n"
                    f"üçé –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {daily_data.logged_calories} –∫–∫–∞–ª –∏–∑ {user.calorie_level} –∫–∫–∞–ª\n"
                    f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {daily_data.burned_calories} –∫–∫–∞–ª"
                )
            else:
                text = "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n\n–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        else:
            text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å."

    await show_menu_with_back_button(callback, text)


@router.callback_query(F.data == "daily_progress_graph")
async def daily_progress_graph(callback: CallbackQuery):
    with get_db() as db:
        user = db.query(User).filter(User.user_id == callback.from_user.id).first()
        if user:
            daily_data = db.query(DailyData).filter(DailyData.user_id == user.user_id, DailyData.date == datetime.today().date()).first()
            if daily_data:
                await callback.message.delete()

                labels = ["–í–æ–¥–∞", "–ö–∞–ª–æ—Ä–∏–∏", "–°–æ–∂–∂–µ–Ω–æ"]
                values = [daily_data.logged_water, daily_data.logged_calories, daily_data.burned_calories]
                goals = [user.water_level, user.calorie_level, 0]

                fig, ax = plt.subplots()
                ax.bar(labels, values, label="–§–∞–∫—Ç")
                ax.bar(labels, goals, alpha=0.5, label="–¶–µ–ª—å")
                ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
                ax.set_title("–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å")
                ax.legend()

                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                plt.close()

                photo = BufferedInputFile(buf.getvalue(), filename="progress.png")

                builder = InlineKeyboardBuilder()
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="statistics")
                await callback.message.answer_photo(
                    photo,
                    caption="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –¥–µ–Ω—å:",
                    reply_markup=builder.as_markup()
                )
            else:
                await callback.message.answer("üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                builder = InlineKeyboardBuilder()
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="statistics")
                await callback.answer(
                    reply_markup=builder.as_markup()
                )
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")


@router.callback_query(F.data == "monthly_progress_graph")
async def monthly_progress_graph(callback: CallbackQuery):
    with get_db() as db:
        user = db.query(User).filter(User.user_id == callback.from_user.id).first()
        if user:
            end_date = datetime.today().date()
            start_date = end_date - timedelta(days=30)
            daily_data = db.query(DailyData).filter(DailyData.user_id == user.user_id, DailyData.date >= start_date, DailyData.date <= end_date).all()

            if daily_data:
                await callback.message.delete()

                dates = [data.date for data in daily_data]
                water = [data.logged_water for data in daily_data]
                calories = [data.logged_calories for data in daily_data]
                burned = [data.burned_calories for data in daily_data]

                fig, ax = plt.subplots()
                ax.plot(dates, water, label="–í–æ–¥–∞")
                ax.plot(dates, calories, label="–ö–∞–ª–æ—Ä–∏–∏")
                ax.plot(dates, burned, label="–°–æ–∂–∂–µ–Ω–æ")
                ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
                ax.set_title("–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü")
                ax.legend()

                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                plt.close()

                photo = BufferedInputFile(buf.getvalue(), filename="monthly_progress.png")

                builder = InlineKeyboardBuilder()
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="statistics")
                await callback.message.answer_photo(
                    photo,
                    caption="üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –º–µ—Å—è—Ü:",
                    reply_markup=builder.as_markup()
                )
            else:
                await callback.message.answer("üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")


@router.callback_query(F.data == "achievements")
async def achievements(callback: CallbackQuery):
    with get_db() as db:
        user = db.query(User).filter(User.user_id == callback.from_user.id).first()
        if user:
            achievements = [
                "üèÖ –í—ã–ø–∏—Ç–æ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å",
                "üèÖ –°–æ–∂–∂–µ–Ω–æ 500 –∫–∫–∞–ª –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                "üèÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π",
            ]
            text = "üèÜ –í–∞—à–∏ –∞—á–∏–≤–∫–∏:\n\n" + "\n".join(achievements)
        else:
            text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å."

    await show_menu_with_back_button(callback, text)


@router.callback_query(F.data == "bot_can_do")
async def bot_can_do(callback: CallbackQuery):
    await show_menu_with_back_button(
        callback,
        "‚ú® –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:\n\n"
        "1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π.\n"
        "2. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É, –µ–¥—É –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
        "3. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
        "4. –£—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã."
    )


@router.callback_query(F.data == "about_bot")
async def about_bot(callback: CallbackQuery):
    await show_menu_with_back_button(
        callback,
        "‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –í–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—è –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π, "
        "–∞ —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–∏—Ç–∞–Ω–∏–µ."
    )


@router.callback_query(F.data == "worker")
async def worker(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()

    builder.button(text="üíß –í–æ–¥–∞", callback_data="log_water")
    builder.button(text="üçé –ï–¥–∞", callback_data="log_food")
    builder.button(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="log_workout")
    builder.button(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")
    builder.button(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")

    builder.adjust(2, 2, 1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "start")
async def back_to_start(callback: CallbackQuery):
    await show_main_menu(callback)


def calculate_water_goal(data, temperature):
    base = data['weight'] * 30
    activity = (data['activity'] // 30) * 500
    temp_addition = 500 if temperature > 25 else 0
    return base + activity + temp_addition


def calculate_calorie_goal(data):
    return (10 * data['weight'] + 6.25 * data['height'] - 5 * data['age']) * 1.5